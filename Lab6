#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include <chrono>
#include <cmath>
#include <limits>
#include <fstream>

// Узел дерева
template <typename T>
struct TreeNode {
    T value;
    TreeNode* left;
    TreeNode* right;
    int height; // Для AVL дерева

    TreeNode(T val) : value(val), left(nullptr), right(nullptr), height(1) {}
};

// Базовый класс бинарного дерева поиска
template <typename T>
class BinarySearchTree {
protected:
    TreeNode<T>* root;
    size_t size;

    void clear(TreeNode<T>* node) {
        if (node) {
            clear(node->left);
            clear(node->right);
            delete node;
        }
    }

    TreeNode<T>* insert(TreeNode<T>* node, T value) {
        if (!node) {
            size++;
            return new TreeNode<T>(value);
        }

        if (value < node->value) {
            node->left = insert(node->left, value);
        } else if (value > node->value) {
            node->right = insert(node->right, value);
        }

        return node;
    }

    bool contains(TreeNode<T>* node, T value) const {
        if (!node) return false;
        if (value == node->value) return true;
        if (value < node->value) return contains(node->left, value);
        return contains(node->right, value);
    }

    TreeNode<T>* findMin(TreeNode<T>* node) const {
        while (node && node->left) node = node->left;
        return node;
    }

    TreeNode<T>* remove(TreeNode<T>* node, T value) {
        if (!node) return nullptr;

        if (value < node->value) {
            node->left = remove(node->left, value);
        } else if (value > node->value) {
            node->right = remove(node->right, value);
        } else {
            if (!node->left || !node->right) {
                TreeNode<T>* temp = node->left ? node->left : node->right;
                if (!temp) {
                    temp = node;
                    node = nullptr;
                } else {
                    *node = *temp;
                }
                delete temp;
                size--;
            } else {
                TreeNode<T>* temp = findMin(node->right);
                node->value = temp->value;
                node->right = remove(node->right, temp->value);
            }
        }

        return node;
    }

    void inOrder(TreeNode<T>* node, std::vector<T>& result) const {
        if (!node) return;
        inOrder(node->left, result);
        result.push_back(node->value);
        inOrder(node->right, result);
    }

public:
    BinarySearchTree() : root(nullptr), size(0) {}
    virtual ~BinarySearchTree() { clear(root); }

    virtual void insert(T value) {
        if (size == std::numeric_limits<size_t>::max()) {
            throw std::overflow_error("Tree size limit reached");
        }
        root = insert(root, value);
    }

    bool contains(T value) const {
        return contains(root, value);
    }

    void remove(T value) {
        root = remove(root, value);
    }

    size_t getSize() const { return size; }

    std::vector<T> toVector() const {
        std::vector<T> result;
        inOrder(root, result);
        return result;
    }

    bool isValid() const {
        auto elements = toVector();
        for (size_t i = 1; i < elements.size(); ++i) {
            if (elements[i] <= elements[i-1]) return false;
        }
        return true;
    }
};

// AVL дерево
template <typename T>
class AVLTree : public BinarySearchTree<T> {
protected:
    using BinarySearchTree<T>::root;
    using BinarySearchTree<T>::size;

    void updateHeight(TreeNode<T>* node) {
        if (!node) return;
        int leftHeight = node->left ? node->left->height : 0;
        int rightHeight = node->right ? node->right->height : 0;
        node->height = 1 + std::max(leftHeight, rightHeight);
    }

    int getBalance(TreeNode<T>* node) {
        if (!node) return 0;
        int leftHeight = node->left ? node->left->height : 0;
        int rightHeight = node->right ? node->right->height : 0;
        return leftHeight - rightHeight;
    }

    bool isAVLBalanced(TreeNode<T>* node) {
        if (!node) return true;
        int balance = getBalance(node);
        return abs(balance) <= 1 && 
               isAVLBalanced(node->left) && 
               isAVLBalanced(node->right);
    }

    TreeNode<T>* rightRotate(TreeNode<T>* y) {
        TreeNode<T>* x = y->left;
        TreeNode<T>* T2 = x->right;

        x->right = y;
        y->left = T2;

        updateHeight(y);
        updateHeight(x);

        return x;
    }

    TreeNode<T>* leftRotate(TreeNode<T>* x) {
        TreeNode<T>* y = x->right;
        TreeNode<T>* T2 = y->left;

        y->left = x;
        x->right = T2;

        updateHeight(x);
        updateHeight(y);

        return y;
    }

    TreeNode<T>* balance(TreeNode<T>* node) {
        if (!node) return nullptr;

        updateHeight(node);
        int balanceFactor = getBalance(node);

        if (balanceFactor > 1 && getBalance(node->left) >= 0)
            return rightRotate(node);

        if (balanceFactor < -1 && getBalance(node->right) <= 0)
            return leftRotate(node);

        if (balanceFactor > 1 && getBalance(node->left) < 0) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        if (balanceFactor < -1 && getBalance(node->right) > 0) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    TreeNode<T>* insert(TreeNode<T>* node, T value) {
        if (!node) {
            size++;
            return new TreeNode<T>(value);
        }

        if (value < node->value) {
            node->left = insert(node->left, value);
        } else if (value > node->value) {
            node->right = insert(node->right, value);
        } else {
            return node; // Дубликаты не допускаются
        }

        return balance(node);
    }

    TreeNode<T>* remove(TreeNode<T>* node, T value) {
        if (!node) return nullptr;

        if (value < node->value) {
            node->left = remove(node->left, value);
        } else if (value > node->value) {
            node->right = remove(node->right, value);
        } else {
            if (!node->left || !node->right) {
                TreeNode<T>* temp = node->left ? node->left : node->right;
                if (!temp) {
                    temp = node;
                    node = nullptr;
                } else {
                    *node = *temp;
                }
                delete temp;
                size--;
            } else {
                TreeNode<T>* temp = this->findMin(node->right);
                node->value = temp->value;
                node->right = remove(node->right, temp->value);
            }
        }

        if (!node) return nullptr;

        return balance(node);
    }

public:
    AVLTree() : BinarySearchTree<T>() {}
    ~AVLTree() = default;

    void insert(T value) override {
        if (size == std::numeric_limits<size_t>::max()) {
            throw std::overflow_error("Tree size limit reached");
        }
        root = insert(root, value);
    }

    void remove(T value) {
        root = remove(root, value);
    }
};

// Генератор случайных чисел
class RandomGenerator {
    std::mt19937 gen;
    std::uniform_int_distribution<int> dist;

public:
    RandomGenerator(int min, int max) : gen(std::random_device{}()), dist(min, max) {}

    int generate() { return dist(gen); }
};

// Функция для измерения времени выполнения
template <typename Func>
long long measureTime(Func func) {
    auto start = std::chrono::high_resolution_clock::now();
    func();
    auto end = std::chrono::high_resolution_clock::now();
    return std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
}

// Структура для хранения результатов тестов
struct TestResult {
    size_t dataSize;
    std::string dataType;
    long long bstInsertTime;
    long long avlInsertTime;
    double bstSearchTime;
    double avlSearchTime;
    double arraySearchTime;
    double bstDeleteTime;
    double avlDeleteTime;
};

// Тестирование дерева (BST или AVL)
template <typename TreeType>
void testTree(TreeType& tree, const std::vector<int>& data, const std::vector<int>& searchValues, 
              long long& insertTime, double& searchTime, double& deleteTime) {
    // Вставка
    insertTime = measureTime([&]() {
        for (int value : data) {
            tree.insert(value);
        }
    });

    // Поиск (1000 операций)
    searchTime = measureTime([&]() {
        for (int i = 0; i < 1000; ++i) {
            tree.contains(searchValues[i]);
        }
    }) / 1000.0;

    // Удаление (1000 операций)
    deleteTime = measureTime([&]() {
        for (int i = 0; i < 1000; ++i) {
            tree.remove(searchValues[i]);
        }
    }) / 1000.0;
}

// Тестирование массива
void testArray(const std::vector<int>& data, const std::vector<int>& searchValues, TestResult& result) {
    std::vector<int> sortedData = data;
    std::sort(sortedData.begin(), sortedData.end());

    result.arraySearchTime = measureTime([&]() {
        for (int i = 0; i < 1000; ++i) {
            [[maybe_unused]] bool found = std::binary_search(sortedData.begin(), sortedData.end(), searchValues[i]);
        }
    }) / 1000.0;
}

// Основная функция тестирования
void runTests() {
    const int NUM_SERIES = 5; // 2^10 ... 2^14
    const int NUM_TESTS_PER_SERIES = 20; // 10 random + 10 sorted
    std::vector<TestResult> results;

    RandomGenerator randGen(1, std::numeric_limits<int>::max());

    for (int series = 0; series < NUM_SERIES; ++series) {
        const size_t dataSize = static_cast<size_t>(std::pow(2, 10 + series));

        for (int test = 0; test < NUM_TESTS_PER_SERIES; ++test) {
            TestResult result;
            result.dataSize = dataSize;
            result.dataType = (test < NUM_TESTS_PER_SERIES / 2) ? "Random" : "Sorted";

            std::vector<int> data(dataSize);
            if (test < NUM_TESTS_PER_SERIES / 2) {
                for (size_t i = 0; i < dataSize; ++i) {
                    data[i] = randGen.generate();
                }
            } else {
                for (size_t i = 0; i < dataSize; ++i) {
                    data[i] = static_cast<int>(i) + 1;
                }
            }

            // Генерация 1000 случайных значений для поиска/удаления
            std::vector<int> searchValues(1000);
            for (int i = 0; i < 1000; ++i) {
                searchValues[i] = randGen.generate();
            }

            if (result.dataType == "Sorted") {
                std::random_shuffle(data.begin(), data.end()); // Перемешиваем данные
            }

            // Тестирование BST
            BinarySearchTree<int> bst;
            testTree(bst, data, searchValues, 
                     result.bstInsertTime, result.bstSearchTime, result.bstDeleteTime);

            // Тестирование AVL
            AVLTree<int> avl;
            testTree(avl, data, searchValues, 
                     result.avlInsertTime, result.avlSearchTime, result.avlDeleteTime);

            // Тестирование массива
            testArray(data, searchValues, result);

            results.push_back(result);
        }
    }

    // Запись результатов в CSV
    std::ofstream csv("results.csv");
    csv << "DataSize,DataType,BST_Insert_Time,AVL_Insert_Time,BST_Search_Time,AVL_Search_Time,Array_Search_Time,BST_Delete_Time,AVL_Delete_Time\n";
    for (const auto& res : results) {
        csv << res.dataSize << ","
            << res.dataType << ","
            << res.bstInsertTime << ","
            << res.avlInsertTime << ","
            << res.bstSearchTime << ","
            << res.avlSearchTime << ","
            << res.arraySearchTime << ","
            << res.bstDeleteTime << ","
            << res.avlDeleteTime << "\n";
    }
}

int main() {
    try {
        runTests();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    return 0;
}
